(define-syntax with-syntax
  (lambda (x)
    (syntax-case x ()
      ((_ ((p e0) ...) e1 e2 ...)
       (syntax (syntax-case (list e0 ...) ()
		 ((p ...) (begin e1 e2 ...))))))))


(define-syntax mycond
  (lambda (x)
    (syntax-case x ()
      ((_ c1 c2 ...)
       (let f ((c1 (syntax c1)) (cmore (syntax (c2 ...))))
	 (if (null? cmore)
	     (syntax-case c1 (else =>)
	       ((else e1 e2 ...) (syntax (begin e1 e2 ...)))
	       ((e0) (syntax (let ((t e0))
			       (if t t))))
	       ((e0 => e1) (syntax (let ((t e0)) (if t (e1 t))
					)))
	       ((e0 e1 e2 ...) (syntax (if e0 (begin e1 e2 ...)))))
	     (with-syntax ((reset (f (car cmore) (cdr cmore))))
	       (syntax-case c1 (=>)
		 ((e0) (syntax (let ((t e0)) (if t t reset))))
		 ((e0 => e1) (syntax (let ((t e0))
				       (if t (e1 t)
					   rest))))
		 ((e0 e1 e2 ...)
		  (syntax (if e0 (begin e1 e2 ...)
			      rest)))))))))))

(define-syntax case
  (lambda (x)
    (syntax-case x ()
      ((_ e c1 c2 ...)
       (with-syntax ((body
		      (let f ((c1 (syntax c1))
			      (cmore (syntax (c2 ...))))
			(if (null? cmore)
			    (syntax-case c1 (else)
			      ((else e1 e2 ...)
			       (syntax (begin e1 e2 ...)))
			      (((k ...) e1 e2 ...)
			       (syntax (if (memv t '(k ...))
					   (begin e1 e2 ...)))))
			    (with-syntax ((rest (f (car cmore)
						   (cdr cmore))))
			      (syntax-case c1 ()
				(((k ...) e1 e2 ...)
				 (syntax (if (memv t '(k ...))
					     (gegin e1 e2 ...)
					     rest)))))))))
	 (syntax (let ((t e)) body)))))))
